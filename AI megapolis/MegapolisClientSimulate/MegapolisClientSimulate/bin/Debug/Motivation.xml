<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Motivation</name>
    </assembly>
    <members>
        <member name="T:Motivation.DefaultSetting">
            <summary>
            DefaultSetting
            </summary>
        </member>
        <member name="F:Motivation.DefaultSetting.AutoSizeEnabled">
            <summary>
            Whether to enable AutoSize properties for the next control
            </summary>
        </member>
        <member name="P:Motivation.DefaultSetting.fontE">
            <summary>
            Default English font
            </summary>
        </member>
        <member name="P:Motivation.DefaultSetting.font">
            <summary>
            Default font
            </summary>
        </member>
        <member name="T:Motivation.HotKeyEventArgs">
            <summary>
            which key (with combo key if available) pressed
            </summary>
        </member>
        <member name="P:Motivation.HotKeyEventArgs.HotKey">
            <summary>
            the hot key
            </summary>
        </member>
        <member name="P:Motivation.HotKeyEventArgs.ComboKey">
            <summary>
            the combo key
            </summary>
        </member>
        <member name="M:Motivation.HotKeyEventArgs.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            constructor
            </summary>
            <param name="hotKey">the hot key</param>
            <param name="comboKey">the combo key</param>
        </member>
        <member name="T:Motivation.MyBitmap">
            <summary>
            for image matching or processing
            </summary>
        </member>
        <member name="F:Motivation.MyBitmap.failedPoint">
            <summary>
            if function didn't find specific point, it would return failedPoint
            </summary>
        </member>
        <member name="M:Motivation.MyBitmap.IsMatch(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            determine whether a specific rectangle area on the source bitmap matches the target bitmap
            </summary>
            <param name="source">the source bitmap</param>
            <param name="target">the target bitmap</param>
            <param name="p">the upper-left point of the comparing area on the source bitmap</param>
            <returns></returns>
        </member>
        <member name="M:Motivation.MyBitmap.IsMatch(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Point)">
            <summary>
            determine whether a specific rectangle area on the source bitmapdata matches the target bitmapdata
            </summary>
            <param name="sd">the source bitmapdata</param>
            <param name="td">the target bitmapdata</param>
            <param name="p">the upper-left point of the comparing area on the source bitmapdata</param>
            <returns></returns>
        </member>
        <member name="M:Motivation.MyBitmap.FindImage(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            find the location of target bitmapdata on the source bitmapdata
            </summary>
            <param name="sd">the source bitmapdata</param>
            <param name="td">the target bitmapdata</param>
            <returns>the location of target bitmapdata on the source bitmapdata, if the point didn't exist, failedPoint would be returned</returns>
        </member>
        <member name="M:Motivation.MyBitmap.FindImage(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            find the location of target bitmap on the source bitmap
            </summary>
            <param name="source">the source bitmap</param>
            <param name="target">the target bitmap</param>
            <returns>the location of target bitmap on the source bitmap, if the point didn't exist, failedPoint would be returned</returns>
        </member>
        <member name="M:Motivation.MyBitmap.Capture(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            capture specific area from specific image as Bitmap
            </summary>
            <param name="bmp">the source image</param>
            <param name="rect">the area to capture</param>
            <returns></returns>
        </member>
        <member name="T:Motivation.MyButton">
            <summary>
            MyButton
            </summary>
        </member>
        <member name="M:Motivation.MyButton.#ctor(System.String)">
            <summary>
            MyButton: Autosize, DockStyle.Fill, Text, Font
            </summary>
        </member>
        <member name="T:Motivation.MyCheckBox">
            <summary>
            MyCheckBox
            </summary>
        </member>
        <member name="M:Motivation.MyCheckBox.#ctor(System.String)">
            <summary>
            MyCheckBox: Autosize, DockStyle.Fill, Text, Font
            </summary>
        </member>
        <member name="T:Motivation.MyCursor">
            <summary>
            control the cursor
            </summary>
        </member>
        <member name="P:Motivation.MyCursor.Position">
            <summary>
            get or set cursor position
            </summary>
        </member>
        <member name="M:Motivation.MyCursor.LeftClick(System.Drawing.Point)">
            <summary>
            move cursor to specific position and then click mouse left button
            </summary>
            <param name="cursorPosition">position where the cursor move to</param>
        </member>
        <member name="M:Motivation.MyCursor.RightClick(System.Drawing.Point)">
            <summary>
            move cursor to specific position and then click mouse right button
            </summary>
            <param name="cursorPosition">position where the cursor move to</param>
        </member>
        <member name="M:Motivation.MyCursor.LeftClick">
            <summary>
            click mouse left button
            </summary>
        </member>
        <member name="M:Motivation.MyCursor.RightClick">
            <summary>
            click mouse right button
            </summary>
        </member>
        <member name="M:Motivation.MyCursor.LeftDown">
            <summary>
            press down mouse left button
            </summary>
        </member>
        <member name="M:Motivation.MyCursor.LeftUp">
            <summary>
            release mouse left button
            </summary>
        </member>
        <member name="M:Motivation.MyCursor.RightDown">
            <summary>
            press down mouse right button
            </summary>
        </member>
        <member name="M:Motivation.MyCursor.RightUp">
            <summary>
            release mouse right button
            </summary>
        </member>
        <member name="T:Motivation.MyInputField">
            <summary>
            MyInputField
            </summary>
        </member>
        <member name="M:Motivation.MyInputField.#ctor">
            <summary>
            MyInputField: Autosize, DockStyle.Fill, Font
            </summary>
        </member>
        <member name="M:Motivation.MyInputField.AddField(System.String,System.String)">
            <summary>
            Add a field
            </summary>
            <param name="name">field name</param>
            <param name="text">field text</param>
        </member>
        <member name="M:Motivation.MyInputField.GetField(System.String)">
            <summary>
            Get specific field text
            </summary>
            <param name="name">field name</param>
        </member>
        <member name="M:Motivation.MyInputField.GetTextBox(System.String)">
            <summary>
            Get specific text box
            </summary>
            <param name="name">field name</param>
        </member>
        <member name="T:Motivation.MyLabel">
            <summary>
            MyLabel
            </summary>
        </member>
        <member name="M:Motivation.MyLabel.#ctor(System.String)">
            <summary>
            MyLabel: Autosize, DockStyle.Fill, Text, Font
            </summary>
        </member>
        <member name="T:Motivation.MyPanel">
            <summary>
            MyPanel
            </summary>
        </member>
        <member name="M:Motivation.MyPanel.#ctor">
            <summary>
            MyPanel: Autosize, DockStyle.Fill, AutoScroll=true
            </summary>
        </member>
        <member name="T:Motivation.MyScreen">
            <summary>
            processings of screen capture
            </summary>
        </member>
        <member name="P:Motivation.MyScreen.failedPoint">
            <summary>
            if function didn't find specific point, it would return failedPoint
            </summary>
        </member>
        <member name="M:Motivation.MyScreen.CaptureScreen">
            <summary>
            return screen capture as Bitmap
            </summary>
            <returns></returns>
        </member>
        <member name="M:Motivation.MyScreen.FindImage(System.Drawing.Bitmap)">
            <summary>
            find the location of specific image on the screen
            </summary>
            <param name="target">the image to find</param>
            <returns>the location of specific image on the screen, failedPoint would be returned if such point didn't exist</returns>
        </member>
        <member name="T:Motivation.MyTableLayoutPanel">
            <summary>
            MyTableLayoutPanel
            </summary>
        </member>
        <member name="M:Motivation.MyTableLayoutPanel.AddControl(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Add Control into MyTableLayoutPanel
            </summary>
        </member>
        <member name="M:Motivation.MyTableLayoutPanel.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            return the TableLayoutPanel you want :)
            </summary>
            <param name="rowCount"></param>
            <param name="columnCount"></param>
            <param name="rowStyles">
            null to let it unchanged<para/>
            format: "%S" or "%S[%s]%S"<para/>
            %s: "%t" or "%t%d" or "%t%d%%%d" (type, height (default: 1), duplication (default: 1) )<para/>
            %t: "S"(Absolute), "A"(AutoSize), or "P"(Percent)<para/>
            %S: concatenation of "%s"<para/>
            </param>
            <param name="columnStyles">
            null to let it unchanged<para/>
            format: "%S" or "%S[%s]%S", "%S[%s]%S"'s "%s"'s duplication must be 1<para/>
            %s: "%t" or "%t%d" or "%t%d%%%d" (type, width (default: 1), duplication (default: 1) )<para/>
            %t: "S"(Absolute), "A"(AutoSize), or "P"(Percent)<para/>
            %S: concatenation of "%s"<para/>
            </param>
            <returns>The TableLayoutPanel you want :)</returns>
        </member>
        <member name="T:Motivation.MyTextBox">
            <summary>
            MyTextBox
            </summary>
        </member>
        <member name="M:Motivation.MyTextBox.#ctor(System.Boolean,System.String)">
            <summary>
            MyTextBox: ScrollBars.Both, DockStyle.Fill, Multiline=true, WordWrap=false, Font, Text
            </summary>
        </member>
    </members>
</doc>
